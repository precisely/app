// JSONData, with optional additional allowed type:
export type JSONData<T = null> = null | boolean | string | number | T | { [key: string]: JSONData<T> } | JSONData<T>[];

export type ContinueCallback = (data?: JSONData, permit?: JSONData) => Promise<void>;

export interface ChatProps {
  key: string,
  type: string, // the key which dispatches to the actual React component via ComponentMap
  permit?: JSONData,
  continueCallback: ContinueCallback, // generated by RunUI, provides a way for components to advance the run
  [key: string]: JSONData<Function>
};

/**
 * E.g., a choice object provided by the API will look like this
 * {
 *   "text": "the title or the message prompt"
 *   "type": "choices",
 *   "choices": [
 *      {:id "red", :text "hey what do you think of this red is cool"},
 *      {:id "blue", :text "the color of the sky"}
 *    ],
 *   "permit": "foo"
 * }
 *
 *
 */